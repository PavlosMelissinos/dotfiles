#+title: Personal Dotfiles - Wayland Desktop Environment
#+author: Pavlos Melissinos
#+date: 2025-07-27

A personal dotfiles repository for a modern Linux desktop environment using Sway
(Wayland compositor) with declarative package management through
home-manager/Nix.

* Overview

This repository contains configuration files for a complete Wayland-first
desktop environment optimized for development work. All user packages are
managed declaratively through home-manager/Nix, providing reproducible
environments and simplified maintenance.

** Key Features
- üèóÔ∏è *Wayland-first desktop* with Sway tiling window manager
- üì¶ *Declarative package management* with home-manager/Nix (95+ packages)
- üîê *U2F hardware key authentication* for system and web services
- üìÅ *XDG Base Directory compliance* for clean home directory organization
- üîÑ *Reproducible environments* with complete configuration in version control

** Architecture
#+begin_example
‚îå‚îÄ USER SPACE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  home-manager/Nix (PRIMARY & ONLY)              ‚îÇ
‚îÇ  ‚îú‚îÄ Development Tools (rust, node, python...)   ‚îÇ
‚îÇ  ‚îú‚îÄ Desktop Environment (sway, waybar, mako...) ‚îÇ
‚îÇ  ‚îú‚îÄ Applications (firefox, vlc, steam...)       ‚îÇ
‚îÇ  ‚îú‚îÄ System Libraries (fonts, certificates...)   ‚îÇ
‚îÇ  ‚îî‚îÄ Configuration Management (git, zsh, emacs)  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ SYSTEM SPACE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  DNF/RPM (System packages only)                 ‚îÇ
‚îÇ  ‚îú‚îÄ Kernel and drivers                          ‚îÇ
‚îÇ  ‚îú‚îÄ System services (systemd, etc.)             ‚îÇ
‚îÇ  ‚îú‚îÄ Core libraries (glibc, etc.)                ‚îÇ
‚îÇ  ‚îî‚îÄ Hardware firmware                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ SANDBOXED ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Flatpak (Platform runtimes only)               ‚îÇ
‚îÇ  ‚îú‚îÄ No user applications installed              ‚îÇ
‚îÇ  ‚îî‚îÄ System platform dependencies only           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#+end_example

* üöÄ Quick Start

** Prerequisites
- Fedora-based Linux system (or compatible)
- Nix package manager installed
- home-manager configured

** Installation
1. Clone this repository to your home directory
2. Enable Nix flakes (if not already enabled):
   #+begin_src bash
   echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
   #+end_src
3. Apply home-manager flake configuration:
   #+begin_src bash
   cd ~/.config/home-manager
   home-manager switch --flake .
   #+end_src
4. Reload Sway configuration:
   #+begin_src bash
   swaymsg reload
   #+end_src

* üìã Component Overview

** Desktop Environment
| Component | Purpose                        | Configuration               |
|-----------+--------------------------------+-----------------------------|
| [[https://swaywm.org/][Sway]]      | Wayland compositor & tiling WM | =.config/sway/config=         |
| [[https://github.com/Alexays/Waybar][Waybar]]    | Status bar                     | =.config/waybar/=             |
| [[https://hg.sr.ht/~scoopta/wofi][Wofi]]      | Application launcher           | =.config/wofi/=               |
| [[https://github.com/emersion/mako][Mako]]      | Notification daemon            | =.config/mako/=               |
| [[https://github.com/swaywm/swaylock][Swaylock]]  | Screen locker (DISABLED)       | =.config/swaylock/= (unused)  |
| [[https://github.com/emersion/kanshi][Kanshi]]    | Multi-monitor management       | =.config/kanshi/=             |
| [[https://gitlab.com/chinstrap/gammastep][Gammastep]] | Blue light filter              | Configured via home-manager |

** Development Tools
| Tool      | Purpose                        | Configuration            |
|-----------+--------------------------------+--------------------------|
| [[https://www.gnu.org/software/emacs/][Emacs]]     | Primary editor (XDG compliant) | =.config/emacs/init.el=    |
| [[https://alacritty.org/][Alacritty]] | Terminal emulator              | =.config/alacritty/=       |
| [[https://www.zsh.org/][Zsh]]       | Shell with custom theme        | =.config/zsh/=             |
| [[https://github.com/tmux/tmux][Tmux]]      | Terminal multiplexer           | =.config/tmux/=            |
| Git       | Version control                | Managed via home-manager |

** Package Management
- *Primary*: home-manager/Nix Flakes (ALL user packages - 95+)
- *System*: DNF/RPM (kernel, drivers, system services only)
- *Sandboxed*: Flatpak (platform runtimes only, no user applications)

* üîê Security Features

** U2F Hardware Key Authentication
Configured for enhanced security across:
- GDM/GNOME login
- sudo administrative tasks
- ~~Swaylock screen unlock~~ (currently disabled due to unlock issues)
- Web services (GitHub, GitLab, cloud providers)

See [[docs/architecture/adr/0004-u2f-hardware-key-authentication.md][ADR-0004]] for implementation details.

** Supported Services
- GitHub, GitLab
- Porkbun, Namecheap (domain management)
- Bitwarden (password management)
- AWS and other cloud providers

* üìÅ File Organization

** XDG Base Directory Compliance
All applications are configured to respect XDG directories where possible:
- =~/.config/= - Application configuration
- =~/.cache/= - Non-essential cached data
- =~/.local/share/= - Application data files
- =~/.local/state/= - Application state data

** Repository Structure
#+begin_example
.
‚îú‚îÄ‚îÄ .config/              # Application configurations
‚îÇ   ‚îú‚îÄ‚îÄ home-manager/     # Nix package & config management
‚îÇ   ‚îú‚îÄ‚îÄ sway/             # Window manager configuration
‚îÇ   ‚îú‚îÄ‚îÄ waybar/           # Status bar configuration
‚îÇ   ‚îú‚îÄ‚îÄ emacs/            # Editor configuration
‚îÇ   ‚îî‚îÄ‚îÄ zsh/              # Shell configuration
‚îú‚îÄ‚îÄ docs/                 # Documentation & ADRs
‚îÇ   ‚îî‚îÄ‚îÄ architecture/adr/ # Architecture Decision Records
‚îú‚îÄ‚îÄ CLAUDE.md             # AI assistant guidance
‚îî‚îÄ‚îÄ README.org            # This file
#+end_example

* üõ†Ô∏è Development Workflow

** Package Management
#+begin_src bash
# Install new packages: Edit .config/home-manager/home.nix, then:
cd ~/.config/home-manager
home-manager switch --flake .

# Update flake inputs (like package updates):
nix flake update

# Update specific input only:
nix flake lock --update-input nixpkgs

# System updates (base OS only):
sudo dnf upgrade --refresh

# Check package status:
ls ~/.nix-profile/bin/ | wc -l  # Count available binaries
#+end_src

** Configuration Updates
#+begin_src bash
# Apply home-manager changes:
cd ~/.config/home-manager
home-manager switch --flake .

# Reload Sway:
swaymsg reload

# Restart Waybar (if needed):
nohup waybar &
#+end_src

** Git Workflow
#+begin_src bash
# Commit configuration changes:
git add .config/ docs/
git commit -m "Add feature X to improve Y

Explain why change was needed and context.
Reference ADR-XXX if architectural decision.

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
#+end_src

* üìö Documentation

** Architecture Decision Records (ADRs)
All significant architectural decisions are documented in =docs/architecture/adr/=:
- [[docs/architecture/adr/0000-record-architecture-decisions.md][ADR-0000]]: Record Architecture Decisions
- [[docs/architecture/adr/0001-package-manager-consolidation.md][ADR-0001]]: Complete Package Manager Consolidation
- [[docs/architecture/adr/0002-sway-window-manager-wayland-first.md][ADR-0002]]: Sway Window Manager with Wayland-First Desktop Environment
- [[docs/architecture/adr/0003-xdg-directory-compliance.md][ADR-0003]]: XDG Base Directory Specification Compliance
- [[docs/architecture/adr/0004-u2f-hardware-key-authentication.md][ADR-0004]]: U2F Hardware Key Authentication
- [[docs/architecture/adr/0005-line-length-text-formatting-standards.md][ADR-0005]]: Line Length and Text Formatting Standards
- [[docs/architecture/adr/0006-trailing-whitespace-policy.md][ADR-0006]]: Trailing Whitespace Policy
- [[docs/architecture/adr/0007-git-commit-message-standards.md][ADR-0007]]: Git Commit Message Standards
- [[docs/architecture/adr/0008-viber-appimage-packaging-solution.md][ADR-0008]]: Viber AppImage Packaging Solution (Superseded)
- [[docs/architecture/adr/0009-complete-guix-elimination.md][ADR-0009]]: Complete Guix Package Manager Elimination
- [[docs/architecture/adr/0010-home-manager-flakes-migration.md][ADR-0010]]: Home Manager Flakes Migration
- [[docs/architecture/adr/0011-viber-nixgl-integration.md][ADR-0011]]: Viber nixGL Integration and Dynamic Icon Extraction

** Additional Documentation
- =CLAUDE.md= - Guidance for AI assistant sessions
- Package reports and migration documentation available in root directory

* ‚ö†Ô∏è Known Issues & Workarounds

** Desktop Environment
- *Sleep recovery*: Laptop screen may not restore after sleep (Sway limitation)
- *Firefox crashes*: Occasional crashes when reloading Sway or returning from
  sleep
- *Waybar disappears*: Restart with =nohup waybar &= if status bar disappears

** Application Limitations
- *Non-XDG applications*: Firefox, Thunderbird, Kodi don't respect XDG directories
- *Legacy compatibility*: Some applications may require XWayland for proper
  operation

** Security & Authentication
- *Swaylock disabled*: Screen locker disabled due to unlock failures with
  home-manager/Nix version
- *Alternative*: Currently relying on system-level screen locking only
- *Status*: Investigating alternative screen lock solutions

** Viber Messaging (AppImage)
- *Package status*: nixpkgs viber package broken due to libxml2 compatibility
  (GitHub Issue #421440)
- *Solution*: nixGL-wrapped AppImage with dynamic icon extraction
- *Features*:
  - ‚úÖ Hardware acceleration via nixGL
  - ‚úÖ Proper font rendering (direct AppImage execution)
  - ‚úÖ Working links (custom xdg-open wrapper for Firefox)
  - ‚úÖ Official Viber icon (dynamically extracted from AppImage)
  - ‚úÖ No binary files stored in git repository
- *Status*: Fully functional with excellent user experience

** Package Management Status
- *Guix elimination*: ‚úÖ Completely eliminated as of 2025-08-06 (ADR-0009)
- *Flakes migration*: ‚úÖ Migrated to modern flakes-based workflow (ADR-0010)
- *Status*: Clean, unified package management through home-manager/Nix flakes only
- *Reproducibility*: All dependencies pinned in flake.lock for consistent builds

** Troubleshooting
#+begin_src bash
# Sway IPC socket issues:
export SWAYSOCK=/run/user/$(id -u)/sway-ipc.$(id -u).$(pgrep -x sway).sock

# Temporary build space (if /tmp is full):
sudo mount -o remount,size=15G /tmp
#+end_src

* üîÑ Maintenance

** Regular Tasks
- Run =home-manager switch= after configuration changes
- Periodic =sudo dnf upgrade --refresh= for system packages
- Monitor =~/.nix-profile/bin/= for binary availability
- Update ADRs when making architectural changes

** Backup Strategy
- Configuration files are tracked in git
- XDG compliance allows selective backup (exclude cache directories)
- Complete user environment reproducible from =home.nix=

* üìà System Status

*Last major update*: 2025-08-11 - Flakes migration and Viber improvements
*Packages managed*: 95+ via home-manager/Nix Flakes
*Architecture*: Wayland-first with modern security features and hardware acceleration
*Reproducibility*: Complete user environment with locked dependencies (flake.lock)

---

*This repository represents a fully consolidated, reproducible desktop
 environment optimized for development productivity and modern security
 practices.*
